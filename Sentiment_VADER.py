# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xio249gBM1h43LV7K0_ntImqijH5Q28h
"""

import numpy as np
import pandas as pd
import io
import string
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import WhitespaceTokenizer


from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
nltk.download("vader_lexicon")



# Pre-text cleaning


# Remove punctuation

def remove_punctuation(text):
    no_punct=[words for words in text if words not in string.punctuation]
    words_wo_punct=''.join(no_punct)
    words_wo_punct = words_wo_punct.rstrip(words_wo_punct[-1])
    return words_wo_punct
case['customercomments']=case['customercomments'].apply(lambda x: remove_punctuation(x))

# Remove digit 

def remove_digit(text):
  no_digit=[words for words in text if not words.isdigit()]
  words_wo_digit = ''.join(no_digit).strip().replace('  ',' ')
  return words_wo_digit
case['customercomments']=case['customercomments'].apply(lambda x: remove_digit(x))



# Sentiment Analysis 

vadersia = SentimentIntensityAnalyzer()
case['compound']=[vadersia.polarity_scores(x)['compound'] for x in case['customercomments']]

# set up threshold
def get_analysis(score):
  if score <= -0.05:
    return 'Negative'
  elif score > 0.05:
    return "Positive"
  else: 
    return "Neutral"

case['VaderAnalysis'] = case['compound'].apply(get_analysis)
